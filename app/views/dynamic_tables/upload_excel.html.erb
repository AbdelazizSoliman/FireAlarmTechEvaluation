<!-- app/views/dynamic_tables/upload_excel.html.erb -->
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <%= csrf_meta_tags %>
  <%= csp_meta_tag %>
  <title>Import Tables from Excel</title>
  <%= stylesheet_link_tag "application", "data-turbo-track": "reload" %>
</head>
<body class="bg-gray-50 min-h-screen p-8">
  <div class="max-w-3xl mx-auto">
    <h1 class="text-2xl font-bold mb-6">Import Tables from Excel</h1>

    <% if flash[:error] %>
      <div class="mb-4 p-3 bg-red-100 text-red-800"><%= flash[:error] %></div>
    <% end %>

    <!-- form must have id so JS can grab it -->
    <form id="excel-upload-form" enctype="multipart/form-data" class="space-y-4">
      <%= hidden_field_tag :authenticity_token, form_authenticity_token %>
      <%= hidden_field_tag :subsystem_id, @subsystem_id %>

      <div>
        <label class="block font-medium">Select an Excel file:</label>
        <input type="file"
               name="excel_file"
               accept=".xlsx"
               required
               class="mt-1 block w-full border-gray-300 rounded" />
      </div>

      <button type="button"
              onclick="uploadExcel()"
              class="px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700">
        Upload & Preview
      </button>
    </form>

    <!-- where the preview table will be injected -->
    <div id="excel-preview" class="mt-8"></div>
  </div>

  <script>
    // grab CSRF token
    function csrfToken(){
      return document.querySelector("meta[name='csrf-token']").content;
    }

    // step 1: send file to preview action
    function uploadExcel(){
      const form = document.getElementById('excel-upload-form');
      const data = new FormData(form);
      fetch('<%= admin_preview_excel_path %>', {
        method:'POST',
        headers:{ 'X-CSRF-Token': csrfToken() },
        body:data
      })
      .then(r=>r.text())
      .then(html=>{
        document.getElementById('excel-preview').innerHTML = html;
        attachCellClickHandlers();
      })
      .catch(console.error);
    }

    // step 2: make cells clickable
    function attachCellClickHandlers(){
      document.querySelectorAll('#excel-preview td').forEach(td=>{
        td.addEventListener('click', ()=>{
          td.classList.toggle('bg-yellow-200');
          updateSelectedCellsInput();
        });
      });
    }

    // step 3: keep a hidden input with the list of clicked refs
    function updateSelectedCellsInput(){
      const refs = Array.from(document.querySelectorAll('#excel-preview td.bg-yellow-200'))
                        .map(td=>td.dataset.ref);
      let hidden = document.getElementById('selected_cells_input');
      if(!hidden){
        hidden = document.createElement('input');
        hidden.type  = 'hidden';
        hidden.id    = 'selected_cells_input';
        hidden.name  = 'selected_cells';
        document.getElementById('excel-preview').appendChild(hidden);
      }
      hidden.value = refs.join(',');
    }

    // step 4: re-post file + selected refs to import action
    function importTables(){
      const form = document.getElementById('excel-upload-form');
      const data = new FormData(form);
      data.set('selected_cells', document.getElementById('selected_cells_input').value);

      fetch('<%= admin_import_excel_tables_path %>', {
        method:'POST',
        headers:{ 'X-CSRF-Token': csrfToken() },
        body:data
      })
      .then(()=> {
        const sid = form.querySelector('input[name="subsystem_id"]').value;
        window.location = `/admin?subsystem_filter=${sid}`;
      })
      .catch(console.error);
    }
  </script>
</body>
</html>
